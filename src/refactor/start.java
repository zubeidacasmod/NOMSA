/*
Copyright notice
NOMSA copyright 2016-2017, Zubeida C. Khan

Copying permission
This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package refactor;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.lang.reflect.Array;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import javax.swing.JFileChooser;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.AxiomType;
import org.semanticweb.owlapi.model.ClassExpressionType;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAnnotation;
import org.semanticweb.owlapi.model.OWLAnnotationProperty;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLClassAxiom;
import org.semanticweb.owlapi.model.OWLClassExpression;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLDataProperty;
import org.semanticweb.owlapi.model.OWLDataPropertyAxiom;
import org.semanticweb.owlapi.model.OWLDataPropertyExpression;
import org.semanticweb.owlapi.model.OWLEntity;
import org.semanticweb.owlapi.model.OWLIndividual;
import org.semanticweb.owlapi.model.OWLIndividualAxiom;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLObjectMaxCardinality;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLObjectPropertyAxiom;
import org.semanticweb.owlapi.model.OWLObjectPropertyExpression;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.util.OWLEntityRemover;
//import org.semanticweb.owl.util.SimpleRootClassChecker;

/**
 *
 * @author ZKhan
 */
public class start extends javax.swing.JFrame {

    private int jfc1;
    private File module;
    
    boolean mLoaded = false;
    private OWLOntologyManager manager;
    private OWLOntology moduleOWL;
    private OWLOntology newmoduleOWL;
    int selectEntType = 3;
private DateFormat time = DateFormat.getTimeInstance();
private Date date = new Date();
   
    /**
     * Creates new form start
     */
    public start() {
       
        initComponents();
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
        jRadioButton3.setEnabled(false);
        jRadioButton4.setEnabled(false);
        jRadioButton9.setEnabled(false);
        jLabel9.setEnabled(false);
        jLabel7.setEnabled(false);
        jLabel4.setEnabled(false);
        jLabel5.setEnabled(false);
        jRadioButton5.setEnabled(false);
        jRadioButton6.setEnabled(false);
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox4.setEnabled(false);
        jTextField1.setEnabled(false);
        jTextField2.setEnabled(false);
        jTextField3.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jCheckBox3.setVisible(false);
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jCheckBox4 = new javax.swing.JCheckBox();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 45)); // NOI18N
        jLabel3.setText("NOMSA");

        jLabel1.setText("<html> <b> Steps </b><br>A. Load the ontology you wish to modularise <br>\nB. Select a method from 1 - 5 <br>\nC. Modularise\n</html>\n");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(jRadioButton9);
        jRadioButton9.setText("1. Axiom abstraction");
        jRadioButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton9ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("2. Entity type abstraction");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("3. High-level abstraction");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jTextField1.setText("3");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("5");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("4. Weighted abstraction");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("B.");

        jLabel7.setText("levels");

        jCheckBox1.setText("Class");

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Object Property");

        jLabel9.setText("Tick to remove");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("5. Feature expressiveness");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jCheckBox4.setText("Data Property");

        jTextField3.setText("50");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton3.setText("Explain threshold values");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setText("Threshold (absolute)");

        buttonGroup2.add(jRadioButton6);
        jRadioButton6.setSelected(true);
        jRadioButton6.setText("Threshold (relative)");

        jLabel4.setText("%");

        jLabel5.setText("axioms");

        jCheckBox3.setText("Individual");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton9)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jCheckBox2)
                                    .addComponent(jLabel9)
                                    .addComponent(jCheckBox4)
                                    .addComponent(jCheckBox3))))
                        .addGap(24, 24, 24))
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton6)
                                .addGap(24, 24, 24)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jRadioButton2))
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jRadioButton4)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(161, 161, 161))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton9)
                            .addComponent(jRadioButton2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton3))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton5)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton6)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)))
                        .addGap(11, 11, 11)
                        .addComponent(jRadioButton4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("load ontology");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("A.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("C.");

        jButton2.setText("modularise");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(41, 41, 41)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jButton2))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel10.setText("<html>Novel Ontology <br> Modularisation <br> SoftwAre</html> ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        jfc1 = jFileChooser1.showOpenDialog(start.this);

        if (jfc1 == JFileChooser.CANCEL_OPTION) {
            System.out.println("File access cancelled by user.");
            // jfc1 = jFileChooser1.showOpenDialog(this);

        } else if (jfc1 == JFileChooser.APPROVE_OPTION) {

            module = jFileChooser1.getSelectedFile();
            //  if (!(module == null)){

            try {
                jTextArea1.append("Loaded module: " + module.getName() + "\n");
                jButton1.setEnabled(true);
                //jButton2.setEnabled(false);

               // jButton4.setEnabled(false);
                //jButton3.setEnabled(true);
                jRadioButton1.setEnabled(true);
                jRadioButton2.setEnabled(true);
                jRadioButton3.setEnabled(true);
                jRadioButton4.setEnabled(true);
                jRadioButton9.setEnabled(true);
                jLabel9.setEnabled(true);
                jLabel7.setEnabled(true);
                jLabel4.setEnabled(true);
                jLabel5.setEnabled(true);
               // jRadioButton5.setEnabled(true);
               // jRadioButton6.setEnabled(true);

                
                jTextField1.setEnabled(true);
                jTextField2.setEnabled(true);
                jTextField3.setEnabled(true);
                jButton2.setEnabled(true);
                jButton3.setEnabled(true);
                mLoaded = true;
            } catch (Exception e) {
                System.out.println(e.toString());
                System.out.println("problem accessing file " + module.getAbsolutePath());
            }

            // }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
private File logfile;


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //setProxy();
        try{
        logfile = new File(System.getProperty("user.home") + "/MLogs/" + module.getName() + "-" + time.format(date).replaceAll(" ", "").replaceAll(":", ".") + ".txt");
                logfile.getParentFile().mkdirs();
                FileWriter write = new FileWriter(logfile);
        
        
                BufferedWriter bwrite = new BufferedWriter(write);
                //bwrite.write("Log file for " + ontology.getName() + "\n\n");
        
               
        long mTime = System.currentTimeMillis();
         float sumMS = 0;
         
        loadOntologies();
         
        //entityTypeAbs();
        //axiomAbs();

        if (jRadioButton9.isSelected()) {
            axiomAbs();
        } else if (jRadioButton1.isSelected()) {

            Set<Integer> types = new HashSet();
            if (jCheckBox1.isSelected()) {
                types.add(0);
            }

            if (jCheckBox2.isSelected()) {
                types.add(1);
            }

            if (jCheckBox3.isSelected()) {
                types.add(2);
            }

            if (jCheckBox4.isSelected()) {
                types.add(3);
            }
            entityTypeAbs(types);

        } else if (jRadioButton2.isSelected()) {
            int level = Integer.parseInt(jTextField1.getText());
            levelAbs(level);
        } else if (jRadioButton3.isSelected()) {

            int absolute = Integer.parseInt(jTextField2.getText());
            int relative = Integer.parseInt(jTextField3.getText());

            if (jRadioButton5.isSelected()) {
                weightedAbs(absolute);
            } else if (jRadioButton6.isSelected()) {
                weighted(relative);
            }

        } else if (jRadioButton4.isSelected()) {
            ruleExp();
            bwrite.write("Rule 1 used "+r1+" times\n");
            bwrite.write("Rule 2 used "+r2+" times\n");
            bwrite.write("Rule 3 used "+r3+" times\n");
            bwrite.write("Rule 4 used "+r4+" times\n");
            bwrite.write("Rule 5 used "+r5+" times\n");
            bwrite.write("Rule 6 used "+r6+" times\n");
            bwrite.write("Rule 7 used "+r7+" times\n");
        }

       // levelAbs(5);

                long mEndTime = System.currentTimeMillis();
                long diffTime = mEndTime - mTime;
                //timet= timet/1000;
                double mSeconds = (double) diffTime / 1000d;
                double mMinutes = (double) mSeconds / 60d;
                double mHours = (double) mMinutes / 60d;
                sumMS += mSeconds;
               bwrite.write("Time in seconds: "+mSeconds); //+ " seconds, " + mMinutes + " minutes, " + mHours + " hours.\n");
         bwrite.close();
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton9ActionPerformed
        // TODO add your handling code here:
        jRadioButton5.setEnabled(false);
                jRadioButton6.setEnabled(false);
                
                jCheckBox1.setEnabled(false);
                jCheckBox2.setEnabled(false);
                jCheckBox3.setEnabled(false);
                jCheckBox4.setEnabled(false);
    }//GEN-LAST:event_jRadioButton9ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // TODO add your handling code here:
        
        jRadioButton5.setEnabled(false);
                jRadioButton6.setEnabled(false);
                jCheckBox1.setEnabled(false);
                jCheckBox2.setEnabled(false);
                jCheckBox3.setEnabled(false);
                jCheckBox4.setEnabled(false);
                
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        jRadioButton6.setSelected(true);
        jRadioButton5.setEnabled(true);
                jRadioButton6.setEnabled(true);
                
                jCheckBox1.setEnabled(false);
                jCheckBox2.setEnabled(false);
                jCheckBox3.setEnabled(false);
                jCheckBox4.setEnabled(false);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new Explain().setVisible(true);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        
                jCheckBox1.setEnabled(true);
                jCheckBox2.setEnabled(true);
                jCheckBox3.setEnabled(true);
                jCheckBox4.setEnabled(true);
                
                jRadioButton5.setEnabled(false);
                jRadioButton6.setEnabled(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        jRadioButton5.setEnabled(false);
                jRadioButton6.setEnabled(false);
                
                jCheckBox1.setEnabled(false);
                jCheckBox2.setEnabled(false);
                jCheckBox3.setEnabled(false);
                jCheckBox4.setEnabled(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    // Entity type abstraction
    // remove classes, OP, DP, or ind
    public void entityTypeAbs(Set<Integer> setInt) {
        //if classes
        
       
        for (Integer integ : setInt) {
           //  System.out.println("entity type "+ integ);
            if (integ == 0) {
                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                for (OWLClass cl : moduleOWL.getClassesInSignature(true)) {
                    cl.accept(enRem);
                }
                //enRem.reset();
                manager.applyChanges(enRem.getChanges());
                //finalSave();
            } //if OP
            else if (integ == 1) {
                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                for (OWLObjectProperty op : moduleOWL.getObjectPropertiesInSignature(true)) {
                    op.accept(enRem);
                }
                //enRem.reset();
                manager.applyChanges(enRem.getChanges());
               // finalSave();
            } //if DP
            else if (integ == 2) {
                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                for (OWLDataProperty dp : moduleOWL.getDataPropertiesInSignature(true)) {
                    dp.accept(enRem);
                }
                //enRem.reset();
                manager.applyChanges(enRem.getChanges());
               // finalSave();
            } //if ind
            else if (integ == 3) {
                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                for (OWLNamedIndividual ind : moduleOWL.getIndividualsInSignature(true)) {
                    ind.accept(enRem);
                }
                //enRem.reset();
                manager.applyChanges(enRem.getChanges());
               // finalSave();
            }

        }
        
         finalSave();
    }

    public void levelAbs(int levelNum) {
        Set<OWLAxiom> ax = moduleOWL.getAxioms();
        for (OWLAxiom a : ax) {
            //System.out.println("axiom " + a);
           // System.out.println("type " + a.getAxiomType());
        }
        OWLClass thingClass = null;

        Set<OWLClass> classes = moduleOWL.getClassesInSignature(true);
        Set<OWLObjectProperty> op = moduleOWL.getObjectPropertiesInSignature(true);
        Set<OWLDataProperty> dp = moduleOWL.getDataPropertiesInSignature(true);
        Set<OWLAnnotationProperty> ann = moduleOWL.getAnnotationPropertiesInSignature();

        System.out.println(" module OWL " + moduleOWL);
        Set<OWLClass> topLevel = new HashSet();
        Set<OWLObjectProperty> topLevelOp = new HashSet();
        Set<OWLDataProperty> topLevelDp = new HashSet();
        Set<OWLAnnotationProperty> topLevelAnn = new HashSet();
        //Set <OWLAnnotationProperty> topLevelInd = new HashSet();
        for (OWLClass cl : classes) {
            if (cl.getSuperClasses(moduleOWL.getImportsClosure()).isEmpty()) {
                //System.out.println("top lvl classes " + cl);

                topLevel.add(cl);
            }
        }

        for (OWLObjectProperty o : op) {
            if (o.getSuperProperties(moduleOWL.getImportsClosure()).isEmpty()) {
               // System.out.println("top lvl op " + o);
                topLevelOp.add(o);
            }
        }

        for (OWLDataProperty d : dp) {
            if (d.getSuperProperties(moduleOWL.getImportsClosure()).isEmpty()) {
             //   System.out.println("top lvl dp " + d);
                topLevelDp.add(d);
            }
        }

        for (OWLAnnotationProperty a : ann) {
            if (a.getSuperProperties(moduleOWL.getImportsClosure()).isEmpty()) {
               // System.out.println("top lvl ap " + a);
                topLevelAnn.add(a);
            }
        }

        int counter = 0;
        /*
         for(OWLClass cl: classes){
             
         //if(counter==2){
         System.out.println("class "+cl);
         System.out.println("class signature "+moduleOWL.getAxioms(cl));
         System.out.println("sub classes "+cl.getSubClasses(moduleOWL.getImportsClosure()));
         // }
         counter++;
         }
         */

        Set<OWLAxiom> newAxioms = new HashSet();
        Set<OWLAxiom> axiomsToRem = new HashSet();
        Set<OWLAxiom> oldAxioms = moduleOWL.getAxioms();
        while (counter != levelNum) {

            Set<OWLClass> temp = new HashSet();
            Set<OWLClass> subTemp = new HashSet();
            Set<OWLIndividual> ind = new HashSet();
            Set<OWLAnnotation> ap = new HashSet();
            for (OWLClass cl : topLevel) {

                newAxioms.addAll(moduleOWL.getAxioms(cl));
                newAxioms.addAll(moduleOWL.getDeclarationAxioms(cl));

                ind.addAll(cl.getIndividuals(moduleOWL.getImportsClosure()));
                ap.addAll(cl.getAnnotations(moduleOWL));

                Set<OWLClassExpression> subTempe = new HashSet();

                if (!(cl.getSubClasses(moduleOWL.getImportsClosure()).isEmpty())) {
                    subTempe.addAll(cl.getSubClasses(moduleOWL.getImportsClosure()));

                    for (OWLClassExpression e : subTempe) {
                        subTemp.add(e.asOWLClass());
                    }

                }
                //subTemp.addAll();
            }

            Set<OWLObjectProperty> tempOp = new HashSet();
            Set<OWLObjectProperty> subTempOp = new HashSet();

            for (OWLObjectProperty o : topLevelOp) {

                newAxioms.addAll(moduleOWL.getAxioms(o));
                newAxioms.addAll(moduleOWL.getDeclarationAxioms(o));

                Set<OWLObjectPropertyExpression> subTempo = new HashSet();
                if (!(o.getSubProperties(moduleOWL.getImportsClosure()).isEmpty())) {
                    subTempo.addAll(o.getSubProperties(moduleOWL.getImportsClosure()));

                    for (OWLObjectPropertyExpression e : subTempo) {
                        subTempOp.add(e.asOWLObjectProperty());
                    }
                }

            }

            Set<OWLDataProperty> tempDp = new HashSet();
            Set<OWLDataProperty> subTempDp = new HashSet();

            for (OWLDataProperty d : topLevelDp) {
                newAxioms.addAll(moduleOWL.getAxioms(d));
                newAxioms.addAll(moduleOWL.getDeclarationAxioms(d));

                Set<OWLDataPropertyExpression> subTempd = new HashSet();
                if (!(d.getSubProperties(moduleOWL.getImportsClosure()).isEmpty())) {
                    subTempd.addAll(d.getSubProperties(moduleOWL.getImportsClosure()));

                    for (OWLDataPropertyExpression e : subTempd) {
                        subTempDp.add(e.asOWLDataProperty());
                    }
                }
            }

            Set<OWLAnnotationProperty> tempAnn = new HashSet();
            Set<OWLAnnotationProperty> subTempAnn = new HashSet();

            for (OWLAnnotationProperty a : topLevelAnn) {
                newAxioms.addAll(moduleOWL.getAxioms(a));
                newAxioms.addAll(moduleOWL.getDeclarationAxioms(a));

                //  Set <OWLDataPropertyExpression> subTempd = new HashSet();
                //  Set <OWLAnnotation> newap= new HashSet();
                if (!(a.getSubProperties(moduleOWL.getImportsClosure()).isEmpty())) {
                    // subTempd.addAll(d.getSubProperties(moduleOWL.getImportsClosure()));
                    subTempAnn.addAll(a.getSubProperties(moduleOWL.getImportsClosure()));

                }

            }

            topLevel.clear();
            topLevel.addAll(subTemp);

            topLevelOp.clear();
            topLevelOp.addAll(subTempOp);

            topLevelDp.clear();
            topLevelDp.addAll(subTempDp);

            counter++;
        }
       // System.out.println();
        //System.out.println();
        //System.out.println("NEW AXIOMS");

        for (OWLAxiom a : newAxioms) {
        //    System.out.println(a);
         //   System.out.println("type " + a.getAxiomType());
          //  System.out.println();
        }

        for (OWLAxiom a : oldAxioms) {
            if (!(newAxioms.contains(a))) {
                axiomsToRem.add(a);
            }
        }

        manager.removeAxioms(moduleOWL, axiomsToRem);

        finalSave();
        /*Set <OWLClassExpression> subclasses= thingClass.getSubClasses(moduleOWL.getImportsClosure());
      
         for(OWLClassExpression e:subclasses){
         System.out.println("expression "+e);
         }
         boolean end = false;
         int count = 0;
        
         while(end == false){
         //Set <OWLClassExpression> subclasses= thingClass.getSubClasses(moduleOWL.getImportsClosure()); 
         }
         */
    }
int r1 = 0, r2 = 0,r3 = 0,r4 = 0,r5 = 0,r6 = 0,r7 =0;
    public void ruleExp() {

        Set<OWLAxiom> ax = moduleOWL.getAxioms();
        Set<OWLAxiom> axSetToRem = new HashSet();

        for (int i = 0; i < 7; i++) {
            
            // Rule 1: cardinality
            if (i == 0) {
                for (OWLAxiom a : ax) {

                    Set<OWLClassExpression> exp = a.getNestedClassExpressions();
                   
                    for (OWLClassExpression e : exp) {
                        if ((e.getClassExpressionType() == ClassExpressionType.DATA_EXACT_CARDINALITY) || (e.getClassExpressionType() == ClassExpressionType.DATA_MIN_CARDINALITY)
                                || (e.getClassExpressionType() == ClassExpressionType.DATA_MAX_CARDINALITY) || (e.getClassExpressionType() == ClassExpressionType.OBJECT_MIN_CARDINALITY)
                                || (e.getClassExpressionType() == ClassExpressionType.OBJECT_MAX_CARDINALITY) || (e.getClassExpressionType() == ClassExpressionType.OBJECT_EXACT_CARDINALITY)) {

                            axSetToRem.add(a);
                            r1++;
                            
                          // System.out.println("rule 1 axiom "+a);
                        }
                    }
                }
                manager.removeAxioms(moduleOWL, axSetToRem);
                
               
            } 
            // Rule 2: Domain/range
            else if (i == 1) {
                for (OWLAxiom a : ax) {
                    if (a.isOfType(AxiomType.ANNOTATION_PROPERTY_DOMAIN) || a.isOfType(AxiomType.ANNOTATION_PROPERTY_RANGE) || a.isOfType(AxiomType.DATA_PROPERTY_DOMAIN)
                            || a.isOfType(AxiomType.DATA_PROPERTY_RANGE) || a.isOfType(AxiomType.OBJECT_PROPERTY_DOMAIN) || a.isOfType(AxiomType.OBJECT_PROPERTY_RANGE)) {

                        axSetToRem.add(a);
                        r2++;
                        
                      //  System.out.println("rule 2 axiom "+a);
                    }
                }

                manager.removeAxioms(moduleOWL, axSetToRem);
            } 
            // Rule 3: Property characteristics
            else if (i == 2) {
                for (OWLAxiom a : ax) {
                    //apply prop. characteristics rules- remove importance 3
                    if (a.isOfType(AxiomType.ASYMMETRIC_OBJECT_PROPERTY) || a.isOfType(AxiomType.FUNCTIONAL_DATA_PROPERTY) || a.isOfType(AxiomType.FUNCTIONAL_OBJECT_PROPERTY)
                            || a.isOfType(AxiomType.INVERSE_FUNCTIONAL_OBJECT_PROPERTY) || a.isOfType(AxiomType.INVERSE_OBJECT_PROPERTIES)) {
                        axSetToRem.add(a);
                        r3++;
                        
                     //   System.out.println("rule 3 axiom "+a);
                    }
                }

                manager.removeAxioms(moduleOWL, axSetToRem);
            } 
            //Rule 4: Disjointness
            else if (i == 3) {
                for (OWLAxiom a : ax) {
                    //apply disjointness rules importance 4
                    if (a.isOfType(AxiomType.DISJOINT_CLASSES) || a.isOfType(AxiomType.DISJOINT_DATA_PROPERTIES) || a.isOfType(AxiomType.DISJOINT_OBJECT_PROPERTIES)
                            || a.isOfType(AxiomType.DISJOINT_UNION))  {
                        axSetToRem.add(a);
                        r4++;
                        
                    //    System.out.println("rule 4 axiom "+a);
                    }
                }

                manager.removeAxioms(moduleOWL, axSetToRem);
            } 
            //Rule 5: Assertions
            else if (i == 4) {
                for (OWLAxiom a : ax) {
                    //apply assertion rules importance 5
                    if (a.isOfType(AxiomType.ANNOTATION_ASSERTION) || a.isOfType(AxiomType.CLASS_ASSERTION) || a.isOfType(AxiomType.DATA_PROPERTY_ASSERTION)
                            || a.isOfType(AxiomType.NEGATIVE_DATA_PROPERTY_ASSERTION) || a.isOfType(AxiomType.NEGATIVE_OBJECT_PROPERTY_ASSERTION) || a.isOfType(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
                        axSetToRem.add(a);
                        r5++;
                        
                    //    System.out.println("rule 5 axiom "+a);
                    }
                }
                manager.removeAxioms(moduleOWL, axSetToRem);
            }
            //Rule 6: Equality/ Unequality
            else if (i == 5) {
                for (OWLAxiom a : ax) {
                    //apply equivalance rules importance 6
                    if (a.isOfType(AxiomType.SAME_INDIVIDUAL) || a.isOfType(AxiomType.DIFFERENT_INDIVIDUALS) || a.isOfType(AxiomType.EQUIVALENT_CLASSES)
                            || a.isOfType(AxiomType.EQUIVALENT_DATA_PROPERTIES) || a.isOfType(AxiomType.EQUIVALENT_OBJECT_PROPERTIES)) {
                        axSetToRem.add(a);
                        r6++;
                        
                      //  System.out.println("rule 6 axiom "+a);
                    }
                }
                manager.removeAxioms(moduleOWL, axSetToRem);
            } 
            //Rule 7: Complex classes
            else if (i == 6) {

                for (OWLAxiom a : ax) {
                    Set<OWLClassExpression> exp = a.getNestedClassExpressions();
                    for (OWLClassExpression e : exp) {
                    
                    if ( (e.getClassExpressionType()== ClassExpressionType.OBJECT_UNION_OF) ||  (e.getClassExpressionType() == ClassExpressionType.OBJECT_INTERSECTION_OF) ) {
                        axSetToRem.add(a);
                        r7++;
                        
                       // System.out.println("rule 7 axiom "+a);
                    }
                }
                }
                manager.removeAxioms(moduleOWL, axSetToRem);
            }
            finalSave(i + 1);
           
            
            /*  
             //apply equivalence rules- remove, importance 7
             for(OWLAxiom a: ax){
             if(a.isOfType(AxiomType.EQUIVALENT_CLASSES) || a.isOfType(AxiomType.SAME_INDIVIDUAL) || a.isOfType(AxiomType.DIFFERENT_INDIVIDUALS)){
               
             }
            
             //apply prop. characteristics rules- remove importance 3
             else if(a.isOfType(AxiomType.ASYMMETRIC_OBJECT_PROPERTY) || a.isOfType(AxiomType.FUNCTIONAL_DATA_PROPERTY) || a.isOfType(AxiomType.FUNCTIONAL_OBJECT_PROPERTY)
             || a.isOfType(AxiomType.INVERSE_FUNCTIONAL_OBJECT_PROPERTY) || a.isOfType(AxiomType.INVERSE_OBJECT_PROPERTIES)){
                
             }
            
 
            
            
             //apply disjointness rules importance 4
             else if(a.isOfType(AxiomType.DISJOINT_CLASSES) || a.isOfType(AxiomType.DISJOINT_DATA_PROPERTIES) || a.isOfType(AxiomType.DISJOINT_OBJECT_PROPERTIES)
             || a.isOfType(AxiomType.DISJOINT_UNION) ){
                
             }
            
             //apply assertion rules importance 5
             else if(a.isOfType(AxiomType.ANNOTATION_ASSERTION) || a.isOfType(AxiomType.CLASS_ASSERTION) || a.isOfType(AxiomType.DATA_PROPERTY_ASSERTION)
             || a.isOfType(AxiomType.NEGATIVE_DATA_PROPERTY_ASSERTION) || a.isOfType(AxiomType.NEGATIVE_OBJECT_PROPERTY_ASSERTION) || a.isOfType(AxiomType.OBJECT_PROPERTY_ASSERTION)){
                
             }
            
             //apply domain and range rules importance 2
             else if(a.isOfType(AxiomType.ANNOTATION_PROPERTY_DOMAIN) || a.isOfType(AxiomType.ANNOTATION_PROPERTY_RANGE) || a.isOfType(AxiomType.DATA_PROPERTY_DOMAIN)
             || a.isOfType(AxiomType.DATA_PROPERTY_RANGE) || a.isOfType(AxiomType.OBJECT_PROPERTY_DOMAIN) || a.isOfType(AxiomType.OBJECT_PROPERTY_RANGE)){
                
             }
            
               
            
               
            
             //remove cardinality restr importance 1
             Set <OWLClassExpression> exp = a .getNestedClassExpressions();
             for (OWLClassExpression e:exp){
             if( (e.getClassExpressionType()==ClassExpressionType.DATA_EXACT_CARDINALITY) || (e.getClassExpressionType()==ClassExpressionType.DATA_MIN_CARDINALITY) 
             || (e.getClassExpressionType()==ClassExpressionType.DATA_MAX_CARDINALITY) || (e.getClassExpressionType()==ClassExpressionType.OBJECT_MIN_CARDINALITY)
             || (e.getClassExpressionType()==ClassExpressionType.OBJECT_MAX_CARDINALITY) || (e.getClassExpressionType()==ClassExpressionType.OBJECT_EXACT_CARDINALITY)
             ){
                   
             }
               
             //remove complex classes importance 6
             else if( (e.getClassExpressionType()==ClassExpressionType.OBJECT_INTERSECTION_OF) || (e.getClassExpressionType()==ClassExpressionType.OBJECT_UNION_OF) 
             || (e.getClassExpressionType()==ClassExpressionType.OBJECT_COMPLEMENT_OF) 
             ){
                   
             }
             }
           
            
             } */

        }
        
         System.out.println("Rule 1 used "+r1);
            System.out.println("Rule 2 used "+r2);
            System.out.println("Rule 3 used "+r3);
            System.out.println("Rule 4 used "+r4);
            System.out.println("Rule 5 used "+r5);
            System.out.println("Rule 6 used "+r6);
            System.out.println("Rule 7 used "+r7);
    }

    //make the ontology a bare taxonomy by removing axioms
    public void axiomAbs() {

        //OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
        Set<OWLAxiom> axiomsToRemove = new HashSet<OWLAxiom>();

        System.out.println("axiom abstraction method");
        Set<OWLAxiom> axiomsToRem = new HashSet();
        Set<OWLAxiom> ax = moduleOWL.getAxioms();

        /*Set <OWLClass> classes= moduleOWL.getClassesInSignature(true);
         for(OWLClass b: classes){  
         if( 
         (b.getClassExpressionType() == ClassExpressionType.OWL_CLASS) ){
        
        
        
         }
         }*/
        for (OWLAxiom a : ax) {
           
            if ((a.isOfType(AxiomType.DECLARATION)) || (a.isOfType(AxiomType.SUBCLASS_OF))
                    || (a.isOfType(AxiomType.SUB_OBJECT_PROPERTY)) || (a.isOfType(AxiomType.SUB_DATA_PROPERTY))
                    || (a.isOfType(AxiomType.SUB_ANNOTATION_PROPERTY_OF))) {
                Set<OWLClassExpression> checkClasses = a.getNestedClassExpressions();
                
               // if (a.isOfType(AxiomType.SUBCLASS_OF)){
                //    System.out.println("sub "+a);
                //}

                for (OWLClassExpression b : checkClasses) {
                    //System.out.println("expression " + b);
                    //
                    //b.getClassExpressionType() == ClassExpressionType
                   // System.out.println(b.getClassExpressionType() + " expression type ");
                    if ((b.getClassExpressionType() == ClassExpressionType.OBJECT_ALL_VALUES_FROM)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_COMPLEMENT_OF)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_EXACT_CARDINALITY)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_HAS_SELF)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_HAS_VALUE)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_INTERSECTION_OF)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_MAX_CARDINALITY)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_MIN_CARDINALITY)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_ONE_OF)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_SOME_VALUES_FROM)
                            || (b.getClassExpressionType() == ClassExpressionType.OBJECT_UNION_OF)) {
                        axiomsToRem.add(a);
                        //ClassExpressionType
                        System.out.println("type11 "+b.getClassExpressionType()+" axiom "+a);

                    } else {
                         System.out.println("type22 "+b.getClassExpressionType()+" axiom "+a);
                         
                    }

                }

            } else {
                axiomsToRem.add(a);
            }

        }
        manager.removeAxioms(moduleOWL, axiomsToRem);

        finalSave();
    }

    public void weighted(int percentage) {
        Set<OWLAxiom> axiomsToRemove = new HashSet<OWLAxiom>();
        Set<OWLClass> classes = moduleOWL.getClassesInSignature(true);
        Set<OWLObjectProperty> ops = moduleOWL.getObjectPropertiesInSignature(true);
        Set<OWLDataProperty> dps = moduleOWL.getDataPropertiesInSignature(true);
        Set<OWLNamedIndividual> inds = moduleOWL.getIndividualsInSignature(true);
        int sum = 0;

        Set ref = new HashSet();
        ArrayList l1 = new ArrayList();
        ArrayList l2 = new ArrayList();

        int[] loo1 = new int[classes.size()];
        OWLClass[] loo2 = new OWLClass[classes.size()];
        OWLObjectProperty[] loo3 = new OWLObjectProperty[ops.size()];
        int[] loo31 = new int[ops.size()];
        OWLDataProperty[] loo4 = new OWLDataProperty[dps.size()];
        int[] loo41 = new int[dps.size()];
        OWLNamedIndividual[] loo5 = new OWLNamedIndividual[inds.size()];
        int[] loo51 = new int[inds.size()];

        //weighting for classes
        int r = 0;
        for (OWLClass c : classes) {
            //System.out.println(c+" "+c.getReferencingAxioms(moduleOWL).size());
            
            sum += c.getReferencingAxioms(moduleOWL,true).size();
            //l1.add(c.getReferencingAxioms(moduleOWL,true).size());
            //l2.add(c);
            loo1[r] = c.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo2[r] = c;
            r++;
        }

        for (int i = 0; i < loo1.length; i++) {
         //   System.out.println(loo2[i] + " " + loo1[i]);
        }

        boolean swapped = true;
        int j = 0;
        int tmp;
        OWLClass tmp2;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < loo2.length - j; i++) {
                if (loo1[i] > loo1[i + 1]) {
                    tmp = loo1[i];
                    loo1[i] = loo1[i + 1];
                    loo1[i + 1] = tmp;

                    tmp2 = loo2[i];
                    loo2[i] = loo2[i + 1];
                    loo2[i + 1] = tmp2;
                    swapped = true;
                   
                }
            }
        }

        for (int i = 0; i < loo2.length; i++) {
            //System.out.println(i+" "+loo2[i]+" "+loo1[i]);
           // System.out.println("class "+loo2[i]+ " ax "+loo2[i].getReferencingAxioms(moduleOWL,true));
        }
        //int position = Math.round(classes.size()/2);
        System.out.println(" cl " + classes.size());
        System.out.println(" perc " + percentage);
        System.out.println(" perc " + (percentage / 100.0));
        double t = (double) (classes.size() * ((double) percentage / 100));
        System.out.println(" t " + t);
        int position = (int) Math.round(t);
        System.out.println("POSITION " + position);
        System.out.println("----------------------");
        for (int i = 0; i < loo1.length; i++) {

            if (i > position) {
          //      System.out.println(loo2[i] + " " + loo1[i]);

                if (loo1[i] == loo1[position]) {
                   // System.out.println("IN HERE ");
                    Set<OWLClassAxiom> axSet = moduleOWL.getAxioms(loo2[i]);
                    axiomsToRemove.addAll(axSet);
                  // System.out.println(" SPEICAL REMOVE " + loo2[i] + " " + loo1[i]);
                    OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                    // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                    loo2[i].accept(enRem);
        //  }
                    //enRem.reset();

                    manager.removeAxioms(moduleOWL, axiomsToRemove);
                    manager.applyChanges(enRem.getChanges());

                }
            } else if (i <= position) {
               // System.out.println("ii " + i);
               // moduleOWL.getAx
                Set<OWLClassAxiom> axSet = moduleOWL.getAxioms(loo2[i]);
                axiomsToRemove.addAll(axSet);

               // System.out.println("REMOVE " + loo2[i] + " " + loo1[i]);
                //System.out.println("remov ax of" +loo2[i]+" is "+ axSet);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo2[i].accept(enRem);
        //  }
                //enRem.reset();

                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());
            }

        }

         //weighting for OP
        sum = 0;
        r = 0;

        for (OWLObjectProperty o : ops) {

            sum += o.getReferencingAxioms(moduleOWL,true).size();

            loo31[r] = o.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo3[r] = o;
            r++;

        }

        swapped = true;
        j = 0;
        tmp = 0;
        OWLObjectProperty tmp3;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < loo3.length - j; i++) {
                if (loo31[i] > loo31[i + 1]) {
                    tmp = loo31[i];
                    loo31[i] = loo31[i + 1];
                    loo31[i + 1] = tmp;

                    tmp3 = loo3[i];
                    loo3[i] = loo3[i + 1];
                    loo3[i + 1] = tmp3;
                    swapped = true;
                }
            }
        }

        for (int i = 0; i < loo31.length; i++) {

            if (i > position) {
                //System.out.println(loo3[i] + " " + loo31[i]);

                if (loo31[i] == loo31[position]) {
                 //   System.out.println("IN HERE ");
                    Set<OWLObjectPropertyAxiom> axSet2 = moduleOWL.getAxioms(loo3[i]);
                    axiomsToRemove.addAll(axSet2);
                   // System.out.println(" SPEICAL REMOVE " + loo3[i] + " " + loo3[i]);
                    OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                    // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                    loo3[i].accept(enRem);
        //  }
                    //enRem.reset();

                    manager.removeAxioms(moduleOWL, axiomsToRemove);
                    manager.applyChanges(enRem.getChanges());

                }
            } else if (i <= position) {
               // System.out.println("ii " + i);
                Set<OWLObjectPropertyAxiom> axSet2 = moduleOWL.getAxioms(loo3[i]);
                axiomsToRemove.addAll(axSet2);

               // System.out.println("REMOVE " + loo3[i] + " " + loo31[i]);
               // System.out.println("remov ax " + axSet2);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo3[i].accept(enRem);
        //  }
                //enRem.reset();

                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());
            }

        }

       //weighting for DP
        for (int i = 0; i < loo41.length; i++) {
            loo41[i] = 0;
        }
        sum = 0;
        r = 0;

        for (OWLDataProperty d : dps) {

            sum += d.getReferencingAxioms(moduleOWL,true).size();

            loo41[r] = d.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo4[r] = d;
            r++;

        }

        swapped = true;
        j = 0;
        tmp = 0;
        OWLDataProperty tmp4;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < loo4.length - j; i++) {
                if (loo41[i] > loo41[i + 1]) {
                    tmp = loo41[i];
                    loo41[i] = loo41[i + 1];
                    loo41[i + 1] = tmp;

                    tmp4 = loo4[i];
                    loo4[i] = loo4[i + 1];
                    loo4[i + 1] = tmp4;
                    swapped = true;
                }
            }
        }

        for (int i = 0; i < loo41.length; i++) {

            if (i > position) {
               // System.out.println(loo4[i] + " " + loo41[i]);

                if (loo41[i] == loo41[position]) {
                 //   System.out.println("IN HERE ");
                    Set<OWLDataPropertyAxiom> axSet2 = moduleOWL.getAxioms(loo4[i]);
                    axiomsToRemove.addAll(axSet2);
                  //  System.out.println(" SPEICAL REMOVE " + loo4[i] + " " + loo4[i]);
                    OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                    // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                    loo4[i].accept(enRem);
        //  }
                    //enRem.reset();

                    manager.removeAxioms(moduleOWL, axiomsToRemove);
                    manager.applyChanges(enRem.getChanges());

                }
            } else if (i <= position) {
               // System.out.println("ii " + i);
                Set<OWLDataPropertyAxiom> axSet2 = moduleOWL.getAxioms(loo4[i]);
                axiomsToRemove.addAll(axSet2);

              //  System.out.println("REMOVE " + loo4[3] + " " + loo41[i]);
                //System.out.println("remov ax " + axSet2);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo4[i].accept(enRem);
        //  }
                //enRem.reset();

                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());
            }

        }

       //weighting for inds
        for (int i = 0; i < loo51.length; i++) {
            loo51[i] = 0;
        }
        sum = 0;
        r = 0;

        for (OWLNamedIndividual in : inds) {

            sum += in.getReferencingAxioms(moduleOWL,true).size();

            loo51[r] = in.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo5[r] = in;
            r++;

        }

        swapped = true;
        j = 0;
        tmp = 0;
        OWLNamedIndividual tmp5;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < loo5.length - j; i++) {
                if (loo51[i] > loo51[i + 1]) {
                    tmp = loo51[i];
                    loo51[i] = loo51[i + 1];
                    loo51[i + 1] = tmp;

                    tmp5 = loo5[i];
                    loo5[i] = loo5[i + 1];
                    loo5[i + 1] = tmp5;
                    swapped = true;
                }
            }
        }

        for (int i = 0; i < loo51.length; i++) {

            if (i > position) {
              //  System.out.println(loo5[i] + " " + loo51[i]);

                if (loo51[i] == loo51[position]) {
                  //  System.out.println("IN HERE ");
                    Set<OWLIndividualAxiom> axSet2 = moduleOWL.getAxioms(loo5[i]);
                    axiomsToRemove.addAll(axSet2);
                 //   System.out.println(" SPEICAL REMOVE " + loo5[i] + " " + loo5[i]);
                    OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                    // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                    loo5[i].accept(enRem);
        //  }
                    //enRem.reset();

                    manager.removeAxioms(moduleOWL, axiomsToRemove);
                    manager.applyChanges(enRem.getChanges());

                }
            } else if (i <= position) {
               // System.out.println("ii " + i);
                Set<OWLIndividualAxiom> axSet2 = moduleOWL.getAxioms(loo5[i]);
                axiomsToRemove.addAll(axSet2);

               // System.out.println("REMOVE " + loo5[3] + " " + loo51[i]);
               // System.out.println("remov ax " + axSet2);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo5[i].accept(enRem);
        //  }
                //enRem.reset();

                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());
            }

        }

        finalSave();
    }

    //absolute values
    public void weightedAbs(int numAxioms) {
        Set<OWLAxiom> axiomsToRemove = new HashSet<OWLAxiom>();
        Set<OWLClass> classes = moduleOWL.getClassesInSignature(true);
        int sum = 0;

        Set<OWLObjectProperty> ops = moduleOWL.getObjectPropertiesInSignature(true);
        Set<OWLDataProperty> dps = moduleOWL.getDataPropertiesInSignature(true);
        Set<OWLNamedIndividual> inds = moduleOWL.getIndividualsInSignature(true);

        int[] loo1 = new int[classes.size()];
        OWLClass[] loo2 = new OWLClass[classes.size()];
        OWLObjectProperty[] loo3 = new OWLObjectProperty[ops.size()];
        int[] loo31 = new int[ops.size()];
        OWLDataProperty[] loo4 = new OWLDataProperty[dps.size()];
        int[] loo41 = new int[dps.size()];
        OWLNamedIndividual[] loo5 = new OWLNamedIndividual[inds.size()];
        int[] loo51 = new int[inds.size()];

        Set ref = new HashSet();
      //  ArrayList l1 = new ArrayList();
      //  ArrayList l2 = new ArrayList();

        int r = 0;
        for (OWLClass c : classes) {
            //System.out.println(c+" "+c.getReferencingAxioms(moduleOWL).size());
            sum += c.getReferencingAxioms(moduleOWL,true).size();
            //l1.add(c.getReferencingAxioms(moduleOWL).size());
            //l2.add(c);
            loo1[r] = c.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo2[r] = c;
            r++;
        }

        //remove if 
        for (int i = 0; i < loo1.length; i++) {
            if (loo1[i] <= numAxioms) {
                Set<OWLClassAxiom> axSet = moduleOWL.getAxioms(loo2[i]);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo2[i].accept(enRem);

              //  System.out.println("REMOVE class " + loo2[i] + " size " + loo1[i]);
              //  System.out.println("ref axioms "+loo2[i].getReferencingAxioms(moduleOWL, true));
        //  }
                //enRem.reset();
                axiomsToRemove.addAll(axSet);
                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());

            }
        }

        //weighting for OPs
        r = 0;
        for (OWLObjectProperty o : ops) {
            //System.out.println(c+" "+c.getReferencingAxioms(moduleOWL).size());
            sum += o.getReferencingAxioms(moduleOWL,true).size();

            loo31[r] = o.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo3[r] = o;
            r++;
        }

        //remove if 
        for (int i = 0; i < loo31.length; i++) {
            if (loo31[i] <= numAxioms) {
                Set<OWLObjectPropertyAxiom> axSet = moduleOWL.getAxioms(loo3[i]);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo3[i].accept(enRem);

                System.out.println("REMOVE op " + loo3[i] + " size " + loo31[i]);
        //  }
                //enRem.reset();
                axiomsToRemove.addAll(axSet);
                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());

            }
        }

        //weighting for DPs
        r = 0;
        for (OWLDataProperty d : dps) {
            //System.out.println(c+" "+c.getReferencingAxioms(moduleOWL).size());
            sum += d.getReferencingAxioms(moduleOWL,true).size();

            loo41[r] = d.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo4[r] = d;
            r++;
        }

        //remove if 
        for (int i = 0; i < loo41.length; i++) {
            if (loo41[i] <= numAxioms) {
                Set<OWLDataPropertyAxiom> axSet = moduleOWL.getAxioms(loo4[i]);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo4[i].accept(enRem);

                System.out.println("REMOVE dp " + loo4[i] + " size " + loo41[i]);
        //  }
                //enRem.reset();
                axiomsToRemove.addAll(axSet);
                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());

            }
        }

        //weighting for inds
        r = 0;
        for (OWLNamedIndividual in : inds) {
            //System.out.println(c+" "+c.getReferencingAxioms(moduleOWL).size());
            sum += in.getReferencingAxioms(moduleOWL,true).size();

            loo51[r] = in.getReferencingAxioms(moduleOWL,true).size();
            //c.getr
            loo5[r] = in;
            r++;
        }

        //remove if 
        for (int i = 0; i < loo51.length; i++) {
            if (loo51[i] <= numAxioms) {
                Set<OWLIndividualAxiom> axSet = moduleOWL.getAxioms(loo5[i]);

                OWLEntityRemover enRem = new OWLEntityRemover(manager, moduleOWL.getImportsClosure());
                // for(OWLClass cl: moduleOWL.getClassesInSignature(true)){
                loo5[i].accept(enRem);

                System.out.println("REMOVE ind " + loo5[i] + " size " + loo51[i]);
        //  }
                //enRem.reset();
                axiomsToRemove.addAll(axSet);
                manager.removeAxioms(moduleOWL, axiomsToRemove);
                manager.applyChanges(enRem.getChanges());

            }
        }
        // manager.removeAxioms(moduleOWL, axiomsToRemove); 
        finalSave();
    }

    public void finalSave() {
        try {
            //  fileName = System.getProperty("user.home") + "/Interchanged/Ontologies/" + tempf + "-" + targetFO+time.format(date).toString().replace(" ", "").replace(":", "")+".owl";
            String s = System.getProperty("user.home") + "/modularised/" + module.getName() + "-module.OWL";
            File file = new File(s);

            manager.saveOntology(moduleOWL, IRI.create(file.toURI()));
            jTextArea1.append("Success\n");
            jTextArea1.append("Module saved to: " + s);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void finalSave(int num) {
        try {
            //  fileName = System.getProperty("user.home") + "/Interchanged/Ontologies/" + tempf + "-" + targetFO+time.format(date).toString().replace(" ", "").replace(":", "")+".owl";
            String s = System.getProperty("user.home") + "/modularised/" + module.getName() + "-module-" + num + ".OWL";
            File file = new File(s);

            manager.saveOntology(moduleOWL, IRI.create(file.toURI()));
            jTextArea1.append("Success\n");
            jTextArea1.append("Module layer " + num + " saved to: " + s);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void loadOntologies() {
        // Get hold of an ontology manager
        // File f = new File();

        setProxy();

        try {

            if (mLoaded == true) {
                manager = OWLManager.createOWLOntologyManager();
                moduleOWL = manager.loadOntologyFromOntologyDocument(module);
                //  newmoduleOWL = manager.loadOntologyFromOntologyDocument(module);
                System.out.println("Module loaded: " + moduleOWL);
            }

            //  System.out.println("here "+mSetLoaded);
        } catch (OWLOntologyCreationException e) {
            System.out.println("Failed to load ontology/ies");
            e.getLocalizedMessage();
        }
    }

    public void setProxy() {
        System.out.println("Proxy settings:");
        String[] proparray = new String[2];
        for (int i = 0; i < proparray.length; i++) {
            proparray[i] = "";
        }

        File propertyfile = new File("proxy.txt");
        BufferedReader reader = null;
        Boolean b = false;

        Properties systemSettings = System.getProperties();
        try {
            reader = new BufferedReader(new FileReader(propertyfile));
            int i = 0;
            String temp;
            while ((temp = reader.readLine()) != null) {
                //String temp =reader.readLine();

                temp = temp.trim();
                //System.out.println(temp);
                proparray = temp.split("=");
                i++;
                if (proparray.length == 2) {

                    proparray[0] = proparray[0].trim();
                    proparray[1] = proparray[1].trim();
                    System.out.print(proparray[0] + ": ");
                    System.out.println(proparray[1]);

                    if (proparray[0].equals("start.proxyHost")) {
                        systemSettings.put("http.proxyHost", proparray[1]);
                        System.setProperties(systemSettings);
                    } else if (proparray[0].equals("start.proxyPort")) {
                        systemSettings.put("http.proxyPort", proparray[1]);
                        System.setProperties(systemSettings);
                    } else if (proparray[0].equals("start.proxyUser")) {
                        systemSettings.put("http.proxyUser", proparray[1]);
                        System.setProperties(systemSettings);
                    } else if (proparray[0].equals("start.proxyPassword")) {
                        systemSettings.put("http.proxyPassword", proparray[1]);
                        System.setProperties(systemSettings);
                    }
                }
            }

        } catch (Exception e) {
            System.out.println(e.toString() + " Error with proxy");
            e.printStackTrace();
        }

        System.out.println();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new start().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
